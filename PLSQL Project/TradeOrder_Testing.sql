
-- Test 1a: Basic Situation.  Shareholder 4 wants to sell
TRUNCATE TABLE trade;
DELETE FROM request;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,    SYSDATE,    'SELL',  7,        5,
1000, 1,               'DAY ONLY',  NULL,       null);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;


-- Test 1b:  Immediate or Cancel
INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,SYSDATE,      'SELL',    7,         5,
1000,   1000,  'IMMEDIATE OR CANCEL',   NULL,     NULL);

SET SERVEROUTPUT on;
exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;



-- Test 1c:  shareholder 5 want to buy (stock_id 6 is not available)
INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5,SYSDATE,'BUY',7,6,
1000,1000,'IMMEDIATE OR CANCEL',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;
SELECT * FROM match;


-- Test 1d:  shareholder 5 wants to buy stock_id 5 which is available
INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5, SYSDATE,     'BUY',  7,          5,
1000,  1000,         'IMMEDIATE OR CANCEL',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;
SELECT * FROM match;


-- Test 2a :  New scenario - requires two buys and one sell
TRUNCATE TABLE trade;
DELETE FROM request;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5,SYSDATE,'BUY',7,5,
500,1,'DAY ONLY',NULL,null);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,6,SYSDATE,'BUY',7,5,
500,1,'DAY ONLY',NULL,NULL);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,SYSDATE,'SELL',7,5,
 1010,1,'DAY ONLY',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;


-- Test3 - New scenario - two sells and two buys
TRUNCATE TABLE trade;
DELETE FROM request;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5,SYSDATE,'SELL',7,5,
500,1,'DAY ONLY',NULL,null);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,6,SYSDATE,'SELL',7,5,
500,1,'DAY ONLY',NULL,NULL);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,SYSDATE,'BUY',7,5,
800,1,'DAY ONLY',NULL,NULL);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,3,SYSDATE,'BUY',7,5,
200,1,'DAY ONLY',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;


-- Test 4:  New scenario - minimum shares not met for sell
TRUNCATE TABLE trade;
DELETE FROM request;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5,SYSDATE,'SELL',7,5,
 400,400,'DAY ONLY',NULL,null);

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,6,SYSDATE,'BUY',7,5,
300,1,'DAY ONLY',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,SYSDATE,'BUY',7,5,
100,1,'DAY ONLY',NULL,NULL);
COMMIT;

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;


-- Test 5:  New scenario - seller sets a price limit higher than market price
TRUNCATE TABLE trade;
DELETE FROM request;

-- Determine market price
SELECT share_price
FROM trade
WHERE trade_id = (SELECT MAX(sub.trade_id)
                  FROM trade sub
                  WHERE sub.stock_ex_id =7
                    AND sub.stock_id = 5)
;
SELECT starting_price
FROM company
WHERE stock_id = 5;
 
-- seller sets a limit price
INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,5,SYSDATE,'SELL',7,5,
 400, 1,'DAY ONLY',60,null);

-- Buyer sets limit price
INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,6,SYSDATE,'BUY',7,5,
300,1,'DAY ONLY',40,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;

INSERT INTO request
(REQUEST_ID,SHAREHOLDER_ID,REQUEST_DATE,BUY_SELL,STOCK_EX_ID,STOCK_ID,
SHARES,MINIMUM_SHARES,TIME_IN_FORCE,LIMIT_PRICE,STOP_PRICE)
VALUES
(request_id_seq.NEXTVAL,4,SYSDATE,'BUY',7,5,
300,1,'DAY ONLY',NULL,NULL);

exec Request_Pkg.ProcessRequests;
SELECT * FROM request;
SELECT * FROM trade;

-- Recheck price
SELECT share_price
FROM trade
WHERE trade_id = (SELECT MAX(sub.trade_id)
                  FROM trade sub
                  WHERE sub.stock_ex_id =7
                    AND sub.stock_id = 5)
;


